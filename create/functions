#Public Functions
NGINX_VERSION=1.8.0
HTTPD_VERSION=2.2.4
MYSQL_VERSION=5.5.20
PHP_VERSION=5.6.2
REDIS_VERSION=3.0.1
#修改下面变量值可更改应用程序源码目录
PACKAGE_PATH="/data/software"
#修改下面变量值可更改应用程序安装父目录,比如/usr/local
APP_PATH="/data/app"
lock="/var/lock/subsys/sdi.lock"

cat<<EOF
############################################################
##           程序版本请修改functions下各参数。            ##
##              若程序出错请查看错误信息。                ##
##作者信息:                                               ##
##    Author:   SaintIC                                   ##
##    QQ:       1663116375                                ##
##    Phone:    18201707941                               ##
##    Design:   https://saintic.com/DIY                   ##   
############################################################
EOF

function HEAD() {
  if [ $(id -u) != "0" ]; then
   	echo "Error:make sure you are root!" ; exit 1
  fi
  sestatus &> /dev/null
  if [ $? -ne 0 ]; then
    yum -y install policycoreutils
  fi
  SESTATE=$(sestatus | nl | wc -l)
  if [ "$SESTATE" != "1" ]; then
	sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
	sed -i 's/SELINUX=permissive/SELINUX=disabled/g' /etc/selinux/config
	echo "Please disable SELinux."
  fi
  [ -d $PACKAGE_PATH ] || mkdir -p $PACKAGE_PATH
  [ -d $APP_PATH ] || mkdir -p $APP_PATH
}

function ERROR() {
  echo "Error:Please check this script and input/output!"
}

CREATE_HTTP() {
HEAD || ERROR
[ -f $lock ] && echo "Please run \"rm -f $lock\", then run again." && exit 1 || touch $lock
yum -y install tar bzip2 gzip libtool pcre-devel gcc-c++ gcc cmake make expat-devel zlib-devel neon-devel openssl-devel cyrus-sasl-devel wget
if [ -f $PACKAGE_PATH/httpd-${HTTPD_VERSION}.tar.gz ] || [ -d $PACKAGE_PATH/httpd-$HTTPD_VERSION ] ; then
  rm -rf $PACKAGE_PATH/httpd-${HTTPD_VERSION}*
fi
cd $PACKAGE_PATH ; wget -c http://archive.apache.org/dist/httpd/httpd-${HTTPD_VERSION}.tar.gz
tar zxf httpd-${HTTPD_VERSION}.tar.gz ; cd httpd-${HTTPD_VERSION}
./configure  --prefix=${APP_PATH}/apache --enable-mods-shared=most --enable-modules=most --enable-so --enable-rewrite=shared --enable-ssl=shared --with-ssl --enable-cgi && make && make install
cp ${APP_PATH}/apache/sbin/apachectl /etc/init.d/httpd
sed -i "s/#ServerName www.example.com:80/ServerName www.saintic.com/g" ${APP_PATH}/apache/conf/httpd.conf
${APP_PATH}/apache/sbin/apachectl -t
rm -f $lock
}

CREATE_NGINX() {
HEAD || ERROR
[ -f $lock ] && echo "Please run \"rm -f $lock\", then run again." && exit 1 || touch $lock
grep "www" /etc/passwd &> /dev/null || useradd -M -s /sbin/nologin www
if [ -f $PACKAGE_PATH/nginx-${NGINX_VERSION}.tar.gz ] || [ -d $PACKAGE_PATH/nginx-$NGINX_VERSION ] ; then
  rm -rf $PACKAGE_PATH/nginx-${NGINX_VERSION}*
fi
yum -y install tar bzip2 gzip pcre pcre-devel gcc gcc-c++ zlib-devel wget openssl-devel ; cd $PACKAGE_PATH ; wget -c http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && tar zxf nginx-${NGINX_VERSION}.tar.gz && cd nginx-$NGINX_VERSION
./configure --prefix=${APP_PATH}/nginx --user=www --group=www --with-poll_module  --with-http_ssl_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_realip_module --with-pcre && make && make install
${APP_PATH}/nginx/sbin/nginx -t
rm -f $lock
}

CREATE_MYSQL() {
HEAD || ERROR
[ -f $lock ] && echo "Please run \"rm -f $lock\", then run again." && exit 1 || touch $lock
yum -y install tar gzip bzip2 gcc gcc-c++ cmake ncurses-devel mysql wget
grep "mysql" || useradd -M -s /sbin/nologin mysql
if [ -f $PACKAGE_PATH/mysql-${MYSQL_VERSION}.tar.gz ] || [ -d $PACKAGE_PATH/mysql-${MYSQL_VERSION} ] ; then
  rm -rf $PACKAGE_PATH/mysql-${MYSQL_VERSION}*
fi
cd $PACKAGE_PATH ; wget -c http://down1.chinaunix.net/distfiles/mysql-${MYSQL_VERSION}.tar.gz || \
wget -c http://software.saintic.com/core/web/mysql-${MYSQL_VERSION}.tar.gz ; tar zxf mysql-${MYSQL_VERSION}}.tar.gz
cd mysql-$MYSQL_VERSION
cmake -DCMAKE_INSTALL_PREFIX=${APP_PATH}/mysql -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=all  -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DENABLED_LOCAL_INFILE=1 -DMYSQL_DATADIR=${APP_PATH}/mysql/data/ -DMYSQL_USER=mysql -DMYSQL_UNIX_ADDR=/tmp/mysqld.sock -DMYSQL_TCP_PORT=3306 && make && make install
cp -f support-files/my-medium.cnf /etc/my.cnf 
chown -R mysql:mysql ${APP_PATH}/mysql
${APP_PATH}/mysql/scripts/mysql_install_db --basedir=${APP_PATH}/mysql --datadir=${APP_PATH}/mysql/data --user=mysql
cp ${APP_PATH}/mysql/support-files/mysql.server /etc/init.d/mysqld
chkconfig --add mysqld
rm -f $lock
exit 0
}

CREATE_PHP() {
web=$1
user=$2
HEAD || ERROR
[ -f $lock ] && echo "Please run \"rm -f $lock\", then run again." && exit 1 || touch $lock
if [ -f $PACKAGE_PATH/php-${PHP_VERSION}.tar.gz ] || [ -d $PACKAGE_PATH/php-${PHP_VERSION} ] ; then
  rm -rf $PACKAGE_PATH/php-${PHP_VERSION}*
fi
yum -y remove php ; yum -y install tar bzip2 gzip libxml2-devel libtool pcre-devel ncurses-devel bison-devel gcc-c++ gcc make cmake expat-devel zlib-devel gd-devel libcurl-devel bzip2-devel readline-devel libedit-devel perl neon-devel openssl-devel cyrus-sasl-devel php-mbstring php-bcmath gettext-devel curl-devel libjpeg-devel libpng-devel
cd $PACKAGE_PATH ; wget -c http://mirrors.sohu.com/php/php-${PHP_VERSION}.tar.gz
wget -c https://software.saintic.com/core/web/php-lib.tar.gz
tar zxf php-lib.tar.gz
tar zxf libmcrypt-2.5.7.tar.gz
tar zxf mhash-0.9.2.tar.gz
tar zxf mcrypt-2.6.4.tar.gz
tar zxf php-${PHP_VERSION}.tar.gz
if [ `uname -p` == "x86_64" ]; then
  ln -s /usr/lib64/libjpeg.so /usr/lib/libjpeg.so &> /dev/null
  ln -s /usr/lib64/libpng.so /usr/lib/libpng.so &> /dev/null
fi
cd ${PACKAGE_PATH}/libmcrypt-2.5.7
./configure && make && make install
ln -s /usr/local/lib/libmcrypt.* /usr/lib64/
cd ${PACKAGE_PATH}/mhash-0.9.2
./configure && make && make install
ln -s /usr/local/lib/libmhash* /usr/lib64/
cd ${PACKAGE_PATH}/mcrypt-2.6.4
./configure && make && make install
cd ${PACKAGE_PATH}/php-$PHP_VERSION

if [ "$web" == "httpd" ]; then
./configure --prefix=${APP_PATH}/php --with-config-file-path=${APP_PATH}/php/etc/ --with-apxs2=${APP_PATH}/apache/bin/apxs --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-iconv --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir --enable-xml --enable-inline-optimization --with-curl --enable-mbstring --with-mhash --with-mcrypt --with-gd --enable-gd-native-ttf --with-openssl --enable-sockets --with-pdo-mysql --enable-pdo --enable-zip --enable-soap --enable-ftp  --enable-shmop --with-bz2 --enable-exif --with-gettext && make
make test <<EOF
n
EOF
make install
local LINE1=$(sed -i '/DirectoryIndex/ d' ${APP_PATH}/apache/conf/httpd.conf | grep -n -s -A 1 "IfModule dir_module" ${APP_PATH}/apache/conf/httpd.conf | grep ":" | awk -F : '{print $1}')
sed -i "${LINE1}a DirectoryIndex index.html index.php" ${APP_PATH}/apache/conf/httpd.conf
local LINE2=$(grep -n "<IfModule mime_module>" ${APP_PATH}/apache/conf/httpd.conf | grep ":" | awk -F : '{print $1}')
sed -i "${LINE2}a AddType application/x-httpd-php .php" ${APP_PATH}/apache/conf/httpd.conf
sed -i 's/DirectoryIndex/DirectoryIndex index.php index.htm/g' ${APP_PATH}/apache/conf/httpd.conf
elif [ "$web" == "nginx" ]; then
./configure --prefix=${APP_PATH}/php --with-config-file-path=${APP_PATH}/php/etc/ --with-mysql=mysqlnd --enable-fpm --with-mysqli=mysqlnd --with-iconv --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir --enable-xml --enable-inline-optimization --with-curl --enable-mbstring --with-mhash --with-mcrypt --with-gd --enable-gd-native-ttf --with-openssl --enable-sockets --with-pdo-mysql --enable-pdo --enable-zip --enable-soap --enable-ftp --with-bz2 --enable-exif --with-gettext
make
make test <<EOF
n
EOF
make install
cd ${APP_PATH}/php/etc/ ; cp php-fpm.conf.default php-fpm.conf
sed -i "s@^pm.max_children.*@pm.max_children = $(($MEM/2/20))@" php-fpm.conf
sed -i "s@^pm.start_servers.*@pm.start_servers = $(($MEM/2/30))@" php-fpm.conf
sed -i "s@^pm.min_spare_servers.*@pm.min_spare_servers = $(($MEM/2/40))@" php-fpm.conf
sed -i "s@^pm.max_spare_servers.*@pm.max_spare_servers = $(($MEM/2/20))@" php-fpm.conf
sed -i "s/user = nobody/user = ${user}/g" php-fpm.conf
sed -i "s/group = nobody/group = ${user}/g" php-fpm.conf
sed -i 's#;pid = run\/php-fpm.pid#pid = run/php-fpm.pid#' php-fpm.conf
local init_fpm="${PACKAGE_PATH}/php-${PHP_VERSION}/sapi/fpm/init.d.php-fpm"
[ -e $init_fpm ] && cp $init_fpm /etc/init.d/php-fpm && chmod +x /etc/init.d/php-fpm && chkconfig --add php-fpm
fi
cp -f ${PACKAGE_PATH}/php-${PHP_VERSION}/php.ini-production ${APP_PATH}/php/etc/php.ini
sed -i 's/post_max_size = 8M/post_max_size = 10M/g' ${APP_PATH}/php/etc/php.ini
sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 10M/g' ${APP_PATH}/php/etc/php.ini
sed -i 's/;date.timezone =/date.timezone = PRC/g' ${APP_PATH}/php/etc/php.ini
sed -i 's/short_open_tag = Off/short_open_tag = On/g' ${APP_PATH}/php/etc/php.ini
sed -i 's/; cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g' ${APP_PATH}/php/etc/php.ini
sed -i 's/; cgi.fix_pathinfo=0/cgi.fix_pathinfo=0/g' ${APP_PATH}/php/etc/php.ini
sed -i 's/max_execution_time = 30/max_execution_time = 300/g' ${APP_PATH}/php/etc/php.ini
}

CREATE_REDIS() {
HEAD || ERROR
[ -f $lock ] && echo "Please run \"rm -f $lock\", then run again." && exit 1 || touch $lock
if [ -f $PACKAGE_PATH/redis-${REDIS_VERSION}.tar.gz ] || [ -d $PACKAGE_PATH/redis-${REDIS_VERSION} ] ; then
  rm -rf $PACKAGE_PATH/redis-${REDIS_VERSION}*
fi
cd $PACKAGE_PATH ; wget -c http://download.redis.io/releases/redis-${REDIS_VERSION}.tar.gz || wget -c https://codeload.github.com/antirez/redis/tar.gz/$REDIS_VERSION
tar zxf redis-${REDIS_VERSION}.tar.gz ; cd redis-$REDIS_VERSION
make
make install
cd utils ; sh install_server.sh
echo "vm.overcommit_memory = 1" >> /etc/sysctl.conf
sysctl -p
}

MongoConfig() {
mkdir -p ${APP_PATH}/mongodb/data ; touch ${APP_PATH}/mongodb/mongod.logs
cat > ${APP_PATH}/mongodb/mongod.conf<<EOF
dbpath = ${APP_PATH}/mongodb/data
logpath = ${APP_PATH}/mongodb/mongod.logs
pidfilepath = /var/run/mongod.pid
logappend = true
bind_ip = 127.0.0.1
port = 27017
fork = true
auth = true
nohttpinterface = true
EOF
}

CREATE_MONGODB() {
HEAD || ERROR
yum -y install wget tar gzip
cd $PACKAGE_PATH
[ -f $lock ] && echo "Please run \"rm -f $lock\", then run again." && exit 1 || touch $lock
if [ -f $PACKAGE_PATH/mongodb-linux-x86_64-3.0.3.tgz ] || [ -d $PACKAGE_PATH/mongodb-linux-x86_64-3.0.3 ] ; then
  rm -rf $PACKAGE_PATH/mongodb-linux-x86_64-3.0.3*
fi
if [ `uname -p` == "x86_64" ]; then
wget -c https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.3.tgz
tar zxf mongodb-linux-x86_64-3.0.3.tgz ; mv mongodb-linux-x86_64-3.0.3 ${APP_PATH}/mongodb
MongoConfig
else
wget -c https://fastdl.mongodb.org/linux/mongodb-linux-i686-3.0.3.tgz
tar zxf mongodb-linux-i686-3.0.3.tgz ; mv mongodb-linux-i686-3.0.3 ${APP_PATH}/mongodb
MongoConfig
fi
${APP_PATH}/mongodb/bin/mongod -f ${APP_PATH}/mongodb/mongod.conf &
rm -f $lock
}

CREATE_MEMCACHE() {
yum -y install wget tar gzip bzip2 zlib zlib-devel gcc gcc-c++ openssl-devel json json-devel
[ -f $lock ] && echo "Please run \"rm -f $lock\", then run again." && exit 1 || touch $lock
if [ -f $PACKAGE_PATH/libevent-2.0.22-stable.tar.gz ] || [ -d $PACKAGE_PATH/libevent-2.0.22-stable ] ; then
  rm -rf $PACKAGE_PATH/libevent-2.0.22-stable
fi
#libevent
cd $PACKAGE_PATH ; wget -c http://jaist.dl.sourceforge.net/project/levent/libevent/libevent-2.0/libevent-2.0.22-stable.tar.gz
[ "$?" -ne 0 ] && wget -c https://codeload.github.com/libevent/libevent/tar.gz/release-2.0.22-stable && mv libevent-release-2.0.22-stable.tar.gz libevent-2.0.22-stable.tar.gz
tar zxf libevent-2.0.22-stable.tar.gz ; cd libevent-2.0.22-stable
./configure --prefix=/usr/ && make && make install
#memcache
if [ -f $PACKAGE_PATH/memcached-1.4.24.tar.gz ] || [ -d $PACKAGE_PATH/memcached-1.4.24 ] ; then
  rm -rf $PACKAGE_PATH/memcached-1.4.24*
fi
cd $PACKAGE_PATH ;  wget -c  http://memcached.org/files/memcached-1.4.24.tar.gz
tar zxf memcached-1.4.24.tar.gz ; cd memcached-1.4.24
./configure --with-libevent=/usr && make && make install
#/usr/local/bin/memcached -d -u root -l 127.0.0.1
rm -f $lock
}

CREATE_MEMCACHED() {
[ -f $lock ] && echo "Please run \"rm -f $lock\", then run again." && exit 1 || touch $lock
if [ -f $PACKAGE_PATH/libmemcached-1.0.18.tar.gz ] || [ -d $PACKAGE_PATH/libmemcached-1.0.18 ] ; then
  rm -rf $PACKAGE_PATH/libmemcached-1.0.18*
fi
cd $PACKAGE_PATH ; wget -c https://launchpadlibrarian.net/165454254/libmemcached-1.0.18.tar.gz
tar zxf libmemcached-1.0.18.tar.gz ; cd libmemcached-1.0.18
./configure --prefix=/usr/local/libmemcached --with-memcached && make && make install
rm -f $lock
}

CREATE_PHP_API() {
if [ "$1" == "redis" ]; then    #php-redis client
local redis_api_version=2.2.7
cd $PACKAGE_PATH ; wget -c http://pecl.php.net/get/redis-${redis_api_version}.tgz
tar zxf redis-${redis_api_version}.tgz ; cd redis-${redis_api_version}
${APP_PATH}/php/bin/phpize
./configure --enable-redis --with-php-config=${APP_PATH}/php/bin/php-config && make && make test && make install > /tmp/redis-api.txt
local EXT1=$(tail -1 /tmp/redis-api.txt | awk -F: '{print $2}' | awk '{print $1}')
echo "extension=${EXT1}redis.so" >> ${APP_PATH}/php/etc/php.ini

elif [ "$1" = "mongodb" ]; then    #php-mongo client
local mongo_api_version=1.6.8
cd $PACKAGE_PATH ; wget -c http://pecl.php.net/get/mongo-${mongo_api_version}.tgz
tar zxf mongo-${mongo_api_version}.tgz ; cd mongo-${mongo_api_version}
${APP_PATH}/php/bin/phpize
./configure --enable-mongo --with-php-config=${APP_PATH}/php/bin/php-config && make && make test && make install > /tmp/mongo-api
local EXT2=$(tail -1 /tmp/mongo-api | awk -F: '{print $2}' | awk '{print $1}')
echo "extension=${EXT2}mongo.so" >> ${APP_PATH}/php/etc/php.ini

elif [ "$1" = "memcache" ]; then    #php-memcache client
local memcache_api_version=2.2.7
cd $PACKAGE_PATH ; wget -c http://pecl.php.net/get/memcache-${memcache_api_version}.tgz
tar zxf memcache-${memcache_api_version}.tgz ; cd memcache-$memcache_api_version
${APP_PATH}/php/bin/phpize
./configure --enable-memcache --with-php-config=${APP_PATH}/php/bin/php-config --with-zlib-dir
make
make test <<EOF
n
EOF
make install > /tmp/memcache-api
local EXT3=$(tail -1 /tmp/memcache-api | awk -F: '{print $2}' | awk '{print $1}')
echo "extension=${EXT3}memcache.so" >> ${APP_PATH}/php/etc/php.ini

elif [ "$1" = "memcached" ]; then    #php-memcached client
local memcached_api_version=2.2.0
cd $PACKAGE_PATH ; wget -c http://pecl.php.net/get/memcached-${memcached_api_version}.tgz
tar zxf memcached-${memcached_api_version}.tgz ; cd memcached-$memcached_api_version
${APP_PATH}/php/bin/phpize
./configure --enable-memcached --with-libmemcached-dir=/usr/local/libmemcached/   --with-php-config=${APP_PATH}/php/bin/php-config  --enable-memcached-json --disable-memcached-sasl
make
make test <<EOF
n
EOF
make install > /tmp/memcached-api
local EXT4=$(tail -1 /tmp/memcached-api | awk -F: '{print $2}' | awk '{print $1}')
echo "extension=${EXT4}memcached.so" >> ${APP_PATH}/php/etc/php.ini
fi
}


